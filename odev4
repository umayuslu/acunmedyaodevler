GARBAGE COLLECTOR

Program tarafÄ±ndan artÄ±k ihtiyaÃ§ duyulmayan nesnelere ayrÄ±lan belleÄŸi otomatik olarak boÅŸaltÄ±r. YerleÅŸik belleÄŸi kurtarÄ±r. SÄ±zÄ±ntÄ±yÄ± Ã¶nler. PerformansÄ± optimize eder. Heap memory verimli kullanÄ±lmasÄ±nÄ± saÄŸlar.
YÃ¼ksek seviyeli dillerde var C# gibi.
Nesneleri generation bazlÄ± yÃ¶netir. ÃœÃ§ tÃ¼r vardÄ±r.

Generation 0 (Gen 0)
KÃ¼Ã§Ã¼k - kÄ±sa Ã¶mÃ¼rlÃ¼ nesneler burada.
En yeniler aynÄ± zamanda en sÄ±k temizlenen.

Generation 1 (Gen 1)
Gen 02daki nesneleri GC temizlenmezse buraya gelir.
Orta Ã¶mÃ¼rlÃ¼ nesneler.

Generation 2 (Gen 2)
Uzun Ã¶mÃ¼rlÃ¼ ve bÃ¼yÃ¼k nesneler. Uzun sÃ¼re kullanÄ±lan nesneler.
En az temizlenen.

Normalde otomatik Ã§alÄ±ÅŸÄ±r ama manuelde Ã§aÄŸÄ±rabilir.

BÃ¼yÃ¼k nesnelerde performans sÄ±kÄ±ntÄ±sÄ± yaÅŸamamak iÃ§in IDisopable ve using kullanÄ±lÄ±r.
85KBdan bÃ¼yÃ¼k nesneler LARGE OBJECT HEAP (LOH) da saklanÄ±r ve buradaki nesneler Gen 2â€™ye yerleÅŸir.

GC Ã§alÄ±ÅŸÄ±rken ana iÅŸ parÃ§acÄ±ÄŸÄ± durdurulabilir.(STOP THE WORLD)

GerÃ§ek zamanlÄ± uygulamalarda gecikme olabilir.

Normalde GC nesneleri temzilediÄŸinde referanslarda silinir ancak bazÄ± nesnelerin tamamen temizlenmesi iÃ§in WeakReference kullanÄ±labilir.


GENERÄ°C CLASSES AND GENERÄ°C METHODS

Veri tiplerini Ã¶nceden belirlemek yerine derleme zamanÄ±nda belirler.

Genericler tip gÃ¼venliÄŸini, kod tekrarÄ±nÄ±nÄ±n azalmasÄ±nÄ± , yeniden kullanÄ±labilmesini saÄŸlar.

Type safety yanlÄ±ÅŸ tÃ¼rde veri kullanÄ±mÄ± hatalarÄ±nÄ± derleme aÅŸamasÄ±nda yok eder.

Unboxing - Boxing iÅŸlemlerini azaltÄ±r. Gereksiz yere bellek kullanmaktan kaÃ§ar.

Boxing 
DeÄŸer tipinin referans tipine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmesi.
Stackde tutulan deÄŸer heape kopyalanÄ±r.

Unboxing:
Referans tipindeki deÄŸerin tekrar deÄŸer tipine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmesi.

Boxing iÅŸlemi heap bellek tasis eder.
Unboxing ek casting gerektirir bu da performans dÃ¼ÅŸÃ¼rÃ¼r.
BunlarÄ± generic kullanÄ±mÄ±yla Ã¶nleyebiliriz.

Casting
Bir veri tÃ¼rÃ¼nÃ¼ baÅŸka bir veri tÃ¼rÃ¼ne dÃ¶nÃ¼ÅŸtÃ¼rmek. Ä°ki tÃ¼r.
Implict casting kÃ¼Ã§Ã¼k veri tÃ¼rÃ¼nÃ¼ bÃ¼yÃ¼k veri tÃ¼rÃ¼ne Ã§evirme otomatik gerÃ§ekleÅŸtir.
Explicit casting bÃ¼yÃ¼k veri tÃ¼rÃ¼nÃ¼ kÃ¼Ã§Ã¼ÄŸe dÃ¶nÃ¼ÅŸtÃ¼rme manuel olarak gerÃ§ekleÅŸir.

Esnek kullanÄ±mÄ± var.

AnlaÅŸÄ±lÄ±rlÄ±k aÃ§Ä±sÄ±ndan Type T ile yazÄ±lÄ±r.
<> Generic yapÄ±larÄ± tanÄ±mlamak iÃ§in kullanÄ±lÄ±r.

Ä°nterface olarakda kullanÄ±labilir.





----

/* 2- Method Overloading ile Matematik SÄ±nÄ±fÄ±
   ğŸ“Œ GÃ¶rev:
   - Matematik iÅŸlemleri iÃ§in bir sÄ±nÄ±f oluÅŸturun.
   - Toplama,Ã‡arpma iÅŸlemleri iÃ§in method overloading uygulayÄ±n.
   - Ä°ki ve Ã¼Ã§ parametreli versiyonlarÄ±nÄ± oluÅŸturun.
   - FarklÄ± veri tiplerinde (int, double) kullanÄ±mÄ± gÃ¶sterin.
   
   */
   
   using System;
  


   class Islemler
   {
      public Islemler()
      {
         Console.WriteLine("Matematik iÅŸlemlerimiz burada:");
      }
      
      public int toplama(int a, int b)
      {
         return a + b;
      }

      public double toplama(double a, double b)
      {
         return a + b;
      } 
      
      public int toplama(int a, int b, int c)
      {
         return a + b + c;
      }
      
      public double toplama(double a, double b, double c)
      {
         return a + b + c;
      }
      public int carpma(int a, int b)
      {
         return a * b;
      }
      
      public double carpma (double a, double b)
      {
         return a * b;
      } 

      public int carpma(int a, int b, int c)
      {
         return a * b * c;
      }
      
      public double carpma (double a, double b, double c)
      {
         return a * b * c;
      }
   }

   

   class Program
   {
      static void Main(string[] args)
      { Islemler nsn = new Islemler();
      Console.WriteLine(nsn.toplama(6,5));
      Console.WriteLine(nsn.toplama(23543,3456));
      Console.WriteLine(nsn.toplama(5,9,0));
      Console.WriteLine(nsn.toplama(5678,678,89));
      
      
      Console.WriteLine(nsn.carpma(9,5));
      Console.WriteLine(nsn.carpma(445,3453));
      Console.WriteLine(nsn.carpma(34532,6535));
      Console.WriteLine(nsn.carpma(5,75654));
      
      
      
         
      }
   }


----


/* Ã–devler ğŸš€
   ğŸ”¹ 1- C#â€™ta Composition Kullanarak AraÃ§ OluÅŸturma
   ğŸ“Œ GÃ¶rev:
   - KapÄ±, Pencere, Kasa ve Marka gibi bileÅŸenleri ayrÄ± sÄ±nÄ±flar olarak tanÄ±mlayÄ±n.
   - Araba sÄ±nÄ±fÄ± bu bileÅŸenleri iÃ§ermeli ve Composition kullanÄ±larak oluÅŸturulmalÄ±dÄ±r.
   - Constructor kullanarak BMW X5 modelini oluÅŸturup ekrana aÅŸaÄŸÄ±daki gibi yazdÄ±rÄ±n:
   ğŸ–¥ Ã‡Ä±ktÄ± Ã–rneÄŸi:

   "ArabanÄ±n markasÄ± BMW, modeli X5, kapÄ± sayÄ±sÄ± 4, pencere sayÄ±sÄ± 4, kasasÄ± sedan, fiyatÄ± 2.000.000 TLâ€™dir."*/
   

using System;

class Kapi
{
    public int Count { get; set; }
    public Kapi(int count)
    {
        this.Count = count;
    }
}

class Pencere
{
    public int Count { get; set; }
    public Pencere(int count)
    {
        this.Count = count;
    }
}

class Kasa
{
    public string Tip { get; set; }
    public Kasa(string tip)
    {
        this.Tip = tip;
    }
}

class Marka
{
    public string Ad { get; set; }
    public string Model { get; set; }
    
    public Marka(string ad, string model)
    {
        this.Ad = ad;
        this.Model = model;
    }
}

class Araba
{
    public Marka Marka { get; set; }
    public Kapi Kapi { get; set; }
    public Pencere Pencere { get; set; }
    public Kasa Kasa { get; set; }
    public double Fiyat { get; set; }

    public Araba(Marka marka, Kapi kapi, Pencere pencere, Kasa kasa, double fiyat)
    {
        this.Marka = marka;
        this.Kapi = kapi;
        this.Pencere = pencere;
        this.Kasa = kasa;
        this.Fiyat = fiyat;
    }

    public void BilgileriYazdir()
    {
        Console.WriteLine($"ArabanÄ±n markasÄ± {Marka.Ad}, modeli {Marka.Model}, kapÄ± sayÄ±sÄ± {Kapi.Count}, pencere sayÄ±sÄ± {Pencere.Count}, kasasÄ± {Kasa.Tip}, fiyatÄ± {Fiyat:N0} TLâ€™dir.");
    }
}

class Program
{
    static void Main()
    {
        Marka bmw = new Marka("BMW", "X5");
        Kapi kapi = new Kapi(4);
        Pencere pencere = new Pencere(4);
        Kasa kasa = new Kasa("Sedan");
        double fiyat = 2000000;

        Araba araba = new Araba(bmw, kapi, pencere, kasa, fiyat);
        araba.BilgileriYazdir();
    }
}

    
    
}
